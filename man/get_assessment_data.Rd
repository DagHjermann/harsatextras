% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_assessment_data.R
\name{get_assessment_data}
\alias{get_assessment_data}
\title{Extract assessment data from an assessment object}
\usage{
get_assessment_data(assessment_obj, subset = NULL)
}
\arguments{
\item{assessment_obj}{A harsat assessment object, resulting
from \code{run_assessment} or \code{run_assessment_tar}.}

\item{subset}{An optional vector specifying which timeseries are to be
assessed. Might be used if the assessment is to be done in chunks because
of size, or when refitting a timeseries model which has not converged. An
expression will be evaluated in the timeSeries component of ctsm_ob; use
'series' to identify individual timeseries. If you used subset when you ran
\code{run_assessment}, you need to specify it here too.}
}
\value{
#' Returns a list with one item per time series. Each of these items is again a new list
with the following components:
\enumerate{
\item data - a data frame with the raw data
\item assessment - a list of 14 items, including \code{fullData} (data frame with raw data) and \code{pred}(data frame for plotting trend lines)
\item series - a data frame with 1 row
\item info - a list of 20 items
\item output_id - a string describing the series, e.g. "4954 Norway 30A Gressholmen CD Mytilus edulis SB NA"
}
}
\description{
Extract assessment data from an assessment object
}
\examples{

plotdat <- get_assessment_data(assessment_part1)

# Shall be equal to the number of time series:
length(plotdat)

# Names of time series:
names(plotdat)

# Check time series number 1:
i <- 1
str(plotdat[[i]], 1)
str(plotdat[[i]]$assessment, 1)


\dontrun{
# Plot time series number 1 using ggplot:

library(ggplot2)

ggplot(plotdat[[i]]$assessment$fullData, aes(year)) +
  geom_ribbon(
    data = plotdat[[i]]$assessment$pred,
    aes(ymin = exp(ci.lower), ymax = exp(ci.upper)),  # note; hard-coded exp
    fill = "lightblue") +
  geom_path(
    data = plotdat[[i]]$assessment$pred,
    aes(y = exp(fit))) +
  geom_point(
    aes(y = concentration, color = censoring),
    color = "darkred") +
  scale_y_log10() +
  labs(title = plotdat[[i]]$output_id)
}

# See ?run_assessment_tar for full workflow

}
